find combination of two nos in an array which will sum upto target
***************************
#####################################
#             nlogn approach        #
#                                   #
#####################################
 vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> store;
        int n=nums.size();
       
        for(int i =0;i<n;i++)
        {
           store.push_back(nums[i]);
         }
        
        vector<int>ans;
        sort(nums.begin(),nums.end());
        int i=0;int j=n-1;
        int sum=0;
        while(i<j)
        {
            sum=nums[i]+nums[j];
            if(sum==target)
            {
                ans.push_back(i);
                ans.push_back(j);
                
            }
            if(sum<target)
            {
                i++;
            }
            else
                j--;
        }
        
        int a =ans[0];
        int b=ans[1];
        
        for(int i=0;i<n;i++)
        {
            if(store[i]==nums[a])
            {
                ans[0]=i;
                break;
            }
            
        }
         for(int i=0;i<n;i++)
        {
        
             if(store[i]==nums[b]&&i!=ans[0])
            {
                ans[1]=i;
                 break;
            }
            
        }
        return ans;  
    }


##################################### O(n) time approach (using hashmap)
 vector<int> twoSum(vector<int>& nums, int target)
    {
        unordered_map<int ,int>map;
        vector<int>ans;
//         store every element in map
        for(int i=0;i<nums.size();i++)
        {
           map[nums[i]]=i;    
        }

        //       find target-value exists or not in map?
        for(int i=0;i<nums.size();i++)
        {
            int k=target-nums[i];
            if(map.find(k)!=map.end())
            {
//                 skip if same index
                if(map[k]==i)
                    continue;
                ans.push_back(i);
                ans.push_back(map[k]);
                
                break;       
           }  
        }
        return ans; 
    }
###########################

****************************
