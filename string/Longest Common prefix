return the longest prefix which every element contains
***************************************
  int compare(string a,string b)
    {
        int i=0;
        while(a[i]==b[i]&&(i<a.length())&&(i<b.length()))
        {
            i++;
        }    
        return i-1;   
    }
    
    
    
    
    int helper(string a ,string b,int c)
    {
        
        for(int i=0;i<=c;i++)
        {
            if(a[i]!=b[i])
                return i-1;           
        }
         return c;   
    }
        
        
    string longestCommonPrefix(vector<string>& strs) 
      {
        if(strs.size()==1)
        {
            return strs[0];
        }
      int check=  compare(strs[0],strs[1]);
        for(int i=1;i<strs.size()-1;i++)
        {
          check= helper(strs[i],strs[i+1],check);
     
   strs[0].resize(check+1);
        return strs[0];
    }
    In this approach instead of returning integer from compare and helper function u can return a string and use one function only O(n^2)time

***************************************


O(nlogn)time 

  string longestCommonPrefix(vector<string>& strs) {
        sort(strs.begin(),strs.end());
        
        string s1=strs[0];
        string s2=strs[strs.size()-1];
        string result="";
        for(int i=0;i<s1.length();i++)
        {
            if(s1[i]!=s2[i]){
                break;
            }
            result+=s1[i];
        }
        return result;
    }
    ************************
